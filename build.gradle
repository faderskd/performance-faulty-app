plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.0-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.0'
    id 'me.champeau.jmh' version '0.7.1'
}

group = 'pl.allegro.tech.eden'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation group: 'org.openjdk.jmh', name: 'jmh-core', version: '1.36'
    testImplementation group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.36'
}

tasks.named('test') {
	useJUnitPlatform()
}

jmh {
    fork = 1
    warmupIterations = 1
    iterations = 2
    if (getBooleanProperty('jmh.profilersEnabled', false)) {
        if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {
            profilers = [
                    'perf',
                    'perfasm:intelSyntax=true',
                    'async:verbose=true;output=flamegraph;event=cpu;dir=./profilers/async;libPath=' + getAsyncProfilerLibPath('LD_LIBRARY_PATH')
            ]
        } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {
            profilers = [
                    'async:verbose=true;output=flamegraph;event=cpu;dir=./profilers/async;libPath=' + getAsyncProfilerLibPath('DYLD_LIBRARY_PATH')
            ]
        }
    }
    if (project.hasProperty('jmh.includes')) {
        includes = [project.findProperty('jmh.includes')]
    }
}

def getBooleanProperty(String name, boolean defaultValue) {
    Boolean.valueOf((project.findProperty(name) ?: defaultValue) as String)
}

static def getAsyncProfilerLibPath(String envVarName) {
    System.getenv(envVarName) ?: System.getProperty('java.library.path')
}